#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.34209
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Porte_monnaie
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Porte-monnaie")]
	public partial class PorteMonnaiesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void InsertPorteMonnaies(PorteMonnaies instance);
    partial void UpdatePorteMonnaies(PorteMonnaies instance);
    partial void DeletePorteMonnaies(PorteMonnaies instance);
    partial void InsertTransactions(Transactions instance);
    partial void UpdateTransactions(Transactions instance);
    partial void DeleteTransactions(Transactions instance);
    partial void InsertCategories(Categories instance);
    partial void UpdateCategories(Categories instance);
    partial void DeleteCategories(Categories instance);
    #endregion
		
		public PorteMonnaiesDataContext() : 
				base(global::Porte_monnaie.Properties.Settings.Default.Porte_monnaieConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PorteMonnaiesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PorteMonnaiesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PorteMonnaiesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PorteMonnaiesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PorteMonnaies> PorteMonnaies
		{
			get
			{
				return this.GetTable<PorteMonnaies>();
			}
		}
		
		public System.Data.Linq.Table<Transactions> Transactions
		{
			get
			{
				return this.GetTable<Transactions>();
			}
		}
		
		public System.Data.Linq.Table<Categories> Categories
		{
			get
			{
				return this.GetTable<Categories>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PorteMonnaies")]
	public partial class PorteMonnaies : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdPorteMonnaie;
		
		private string _NomPorteMonnaie;
		
		private decimal _SoldePorteMonnaie;
		
		private EntitySet<Transactions> _Transactions;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdPorteMonnaieChanging(int value);
    partial void OnIdPorteMonnaieChanged();
    partial void OnNomPorteMonnaieChanging(string value);
    partial void OnNomPorteMonnaieChanged();
    partial void OnSoldePorteMonnaieChanging(decimal value);
    partial void OnSoldePorteMonnaieChanged();
    #endregion
		
		public PorteMonnaies()
		{
			this._Transactions = new EntitySet<Transactions>(new Action<Transactions>(this.attach_Transactions), new Action<Transactions>(this.detach_Transactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPorteMonnaie", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdPorteMonnaie
		{
			get
			{
				return this._IdPorteMonnaie;
			}
			set
			{
				if ((this._IdPorteMonnaie != value))
				{
					this.OnIdPorteMonnaieChanging(value);
					this.SendPropertyChanging();
					this._IdPorteMonnaie = value;
					this.SendPropertyChanged("IdPorteMonnaie");
					this.OnIdPorteMonnaieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NomPorteMonnaie", DbType="VarChar(50)")]
		public string NomPorteMonnaie
		{
			get
			{
				return this._NomPorteMonnaie;
			}
			set
			{
				if ((this._NomPorteMonnaie != value))
				{
					this.OnNomPorteMonnaieChanging(value);
					this.SendPropertyChanging();
					this._NomPorteMonnaie = value;
					this.SendPropertyChanged("NomPorteMonnaie");
					this.OnNomPorteMonnaieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoldePorteMonnaie", DbType="Decimal(18,0) NOT NULL")]
		public decimal SoldePorteMonnaie
		{
			get
			{
				return this._SoldePorteMonnaie;
			}
			set
			{
				if ((this._SoldePorteMonnaie != value))
				{
					this.OnSoldePorteMonnaieChanging(value);
					this.SendPropertyChanging();
					this._SoldePorteMonnaie = value;
					this.SendPropertyChanged("SoldePorteMonnaie");
					this.OnSoldePorteMonnaieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PorteMonnaies_Transactions", Storage="_Transactions", ThisKey="IdPorteMonnaie", OtherKey="IdPorteMonnaie")]
		public EntitySet<Transactions> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transactions entity)
		{
			this.SendPropertyChanging();
			entity.PorteMonnaies = this;
		}
		
		private void detach_Transactions(Transactions entity)
		{
			this.SendPropertyChanging();
			entity.PorteMonnaies = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Transactions")]
	public partial class Transactions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdTransaction;
		
		private string _Motif;
		
		private System.Nullable<decimal> _Montant;
		
		private int _IdCategorie;
		
		private int _IdPorteMonnaie;
		
		private string _Type;
		
		private EntityRef<PorteMonnaies> _PorteMonnaies;
		
		private EntityRef<Categories> _Categories;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdTransactionChanging(int value);
    partial void OnIdTransactionChanged();
    partial void OnMotifChanging(string value);
    partial void OnMotifChanged();
    partial void OnMontantChanging(System.Nullable<decimal> value);
    partial void OnMontantChanged();
    partial void OnIdCategorieChanging(int value);
    partial void OnIdCategorieChanged();
    partial void OnIdPorteMonnaieChanging(int value);
    partial void OnIdPorteMonnaieChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public Transactions()
		{
			this._PorteMonnaies = default(EntityRef<PorteMonnaies>);
			this._Categories = default(EntityRef<Categories>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTransaction", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdTransaction
		{
			get
			{
				return this._IdTransaction;
			}
			set
			{
				if ((this._IdTransaction != value))
				{
					this.OnIdTransactionChanging(value);
					this.SendPropertyChanging();
					this._IdTransaction = value;
					this.SendPropertyChanged("IdTransaction");
					this.OnIdTransactionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Motif", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Motif
		{
			get
			{
				return this._Motif;
			}
			set
			{
				if ((this._Motif != value))
				{
					this.OnMotifChanging(value);
					this.SendPropertyChanging();
					this._Motif = value;
					this.SendPropertyChanged("Motif");
					this.OnMotifChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Montant", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Montant
		{
			get
			{
				return this._Montant;
			}
			set
			{
				if ((this._Montant != value))
				{
					this.OnMontantChanging(value);
					this.SendPropertyChanging();
					this._Montant = value;
					this.SendPropertyChanged("Montant");
					this.OnMontantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCategorie", DbType="Int NOT NULL")]
		public int IdCategorie
		{
			get
			{
				return this._IdCategorie;
			}
			set
			{
				if ((this._IdCategorie != value))
				{
					if (this._Categories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCategorieChanging(value);
					this.SendPropertyChanging();
					this._IdCategorie = value;
					this.SendPropertyChanged("IdCategorie");
					this.OnIdCategorieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPorteMonnaie", DbType="Int NOT NULL")]
		public int IdPorteMonnaie
		{
			get
			{
				return this._IdPorteMonnaie;
			}
			set
			{
				if ((this._IdPorteMonnaie != value))
				{
					if (this._PorteMonnaies.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPorteMonnaieChanging(value);
					this.SendPropertyChanging();
					this._IdPorteMonnaie = value;
					this.SendPropertyChanged("IdPorteMonnaie");
					this.OnIdPorteMonnaieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(7) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PorteMonnaies_Transactions", Storage="_PorteMonnaies", ThisKey="IdPorteMonnaie", OtherKey="IdPorteMonnaie", IsForeignKey=true)]
		public PorteMonnaies PorteMonnaies
		{
			get
			{
				return this._PorteMonnaies.Entity;
			}
			set
			{
				PorteMonnaies previousValue = this._PorteMonnaies.Entity;
				if (((previousValue != value) 
							|| (this._PorteMonnaies.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PorteMonnaies.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._PorteMonnaies.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._IdPorteMonnaie = value.IdPorteMonnaie;
					}
					else
					{
						this._IdPorteMonnaie = default(int);
					}
					this.SendPropertyChanged("PorteMonnaies");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categories_Transactions", Storage="_Categories", ThisKey="IdCategorie", OtherKey="IdCategorie", IsForeignKey=true)]
		public Categories Categories
		{
			get
			{
				return this._Categories.Entity;
			}
			set
			{
				Categories previousValue = this._Categories.Entity;
				if (((previousValue != value) 
							|| (this._Categories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Categories.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Categories.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._IdCategorie = value.IdCategorie;
					}
					else
					{
						this._IdCategorie = default(int);
					}
					this.SendPropertyChanged("Categories");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class Categories : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCategorie;
		
		private string _NomCategorie;
		
		private string _TypeCategorie;
		
		private EntitySet<Transactions> _Transactions;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCategorieChanging(int value);
    partial void OnIdCategorieChanged();
    partial void OnNomCategorieChanging(string value);
    partial void OnNomCategorieChanged();
    partial void OnTypeCategorieChanging(string value);
    partial void OnTypeCategorieChanged();
    #endregion
		
		public Categories()
		{
			this._Transactions = new EntitySet<Transactions>(new Action<Transactions>(this.attach_Transactions), new Action<Transactions>(this.detach_Transactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCategorie", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdCategorie
		{
			get
			{
				return this._IdCategorie;
			}
			set
			{
				if ((this._IdCategorie != value))
				{
					this.OnIdCategorieChanging(value);
					this.SendPropertyChanging();
					this._IdCategorie = value;
					this.SendPropertyChanged("IdCategorie");
					this.OnIdCategorieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NomCategorie", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string NomCategorie
		{
			get
			{
				return this._NomCategorie;
			}
			set
			{
				if ((this._NomCategorie != value))
				{
					this.OnNomCategorieChanging(value);
					this.SendPropertyChanging();
					this._NomCategorie = value;
					this.SendPropertyChanged("NomCategorie");
					this.OnNomCategorieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeCategorie", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TypeCategorie
		{
			get
			{
				return this._TypeCategorie;
			}
			set
			{
				if ((this._TypeCategorie != value))
				{
					this.OnTypeCategorieChanging(value);
					this.SendPropertyChanging();
					this._TypeCategorie = value;
					this.SendPropertyChanged("TypeCategorie");
					this.OnTypeCategorieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categories_Transactions", Storage="_Transactions", ThisKey="IdCategorie", OtherKey="IdCategorie")]
		public EntitySet<Transactions> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transactions entity)
		{
			this.SendPropertyChanging();
			entity.Categories = this;
		}
		
		private void detach_Transactions(Transactions entity)
		{
			this.SendPropertyChanging();
			entity.Categories = null;
		}
	}
}
#pragma warning restore 1591
